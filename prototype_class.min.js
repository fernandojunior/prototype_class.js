var PrototypeClass = {

    prototype : {
        initialize: function () {
        },

        instanceof: function (cls) {
            return cls.prototype.isPrototypeOf(this);
        },
    
        /**
        * @test
        **/
        super: function () {
            var arguments = [].splice.call(arguments, 0);
            var memberName = arguments[0];
            var args = [];
            if (arguments.length > 1) {
                args = arguments.slice(1, arguments.length);
            }
            return this.class.super(this, memberName, args);         
        }
    },

    create : function () {
        var instance = Object.create(this.prototype);
        instance.initialize.apply(instance, arguments);
        instance.class = this;
        return instance;
    },

    dextend: function (propertyDescriptors) {

        if (typeof propertyDescriptors.prototype !== "undefined"
                && typeof propertyDescriptors.prototype.value !== "undefined") {
            propertyDescriptors.prototype.value = Object.create(this.prototype, propertyDescriptors.prototype.value);
        }

        return Object.create(this, propertyDescriptors);

    },

    extend: function () {

        if (arguments.length == 2) {
            var type = arguments[0];
            var properties = arguments[1];

            if (type === "prototype") {
                return this.pextend(properties);
            } else if (type === "descriptors") {
                return this.dextend(properties);
            } else if (type === "normal") {
                return this.dextend(this.descriptoralize(properties));
            }

        } else {
            var properties = arguments[0];
            return this.dextend(this.descriptoralize(properties));
        }
    },
        
    pextend: function (prototype_properties) {
        return this.extend({
            prototype: prototype_properties
        });
    },

    invoke_member: function (obj, memberName, args) {
        var member = this.prototype[memberName];
        return member.apply(obj, args);
    },

    invoke_class_member: function (memberName, args) {
        var member = this[memberName];
        return member.apply(args);
    },

    super: function (obj, memberName, args) {
        var super_class = Object.getPrototypeOf(this);
        return super_class.invoke_member(obj, memberName, args);
    },

    super_class_member: function (memberName, args) {
        var super_class = Object.getPrototypeOf(this);
        return super_class.invoke_class_member(memberName, args);
    },

    isPrototypeOf: function (obj) {
        return this.prototype.isPrototypeOf(obj);
    },

    descriptoralize: function (class_properties) {

        for (var key in class_properties.prototype) {
            class_properties.prototype[key] = { 
                value: class_properties.prototype[key],
                enumerable: true,
                configurable: true,
                writable: true
            }
        }

        for (var key in class_properties) {
            class_properties[key] = {
                value: class_properties[key],
                enumerable: true,
                configurable: true,
                writable: true
            }                
        }

        return class_properties;

    }

};